{"ast":null,"code":"var _jsxFileName = \"/Users/rvaldes/Documents/Pythonprojects/newcavldatabase/frontend/my-app/src/components/Itemlist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Item from './Item';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function getJson() {\n  var jsonData = await fetch('http://localhost:5000/api/items?by=ID').then(response => response.json()).then(data => JSON.parse(data));\n  return jsonData;\n} // get the list of JSON items from server by name\n\n\nasync function getJsonByName() {\n  var jsonData = await fetch('http://localhost:5000/api/items?by=name').then(response => response.json()).then(data => JSON.parse(data));\n  return jsonData;\n} // function get the names of all items in the json object\n\n\nvar nameSetFunc = jsonRes => {\n  // create a new set\n  var nameSet = new Set(); // loop over json object that is passed in as an argument\n\n  for (const key in jsonRes) {\n    if (Object.hasOwnProperty.call(jsonRes, key)) {\n      // get each element from object and assign it to const\n      const element = jsonRes[key]; // add the element to a set\n\n      nameSet.add(element['name']);\n    } // create an array and spread all the set elements into the array\n\n\n    var nameArray = [...nameSet];\n  }\n\n  return nameArray;\n}; // react component function\n\n\nfunction Itemlist() {\n  _s();\n\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [namesIsLoaded, setNamesIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [itemsByName, setItemsByName] = useState([]);\n  const [nameSet, setNameSet] = useState([]); // run on render\n\n  useEffect(() => {\n    // get items from getJson functon and add to 'items' state\n    const setJson = async () => {\n      var jsonRes = await getJson();\n      setItems(jsonRes); // pass the JSON data into the 'create set' function\n      // and then add it to the Set state\n\n      setNameSet(nameSetFunc(jsonRes));\n    }; // get object of items by name from getJsonByName functon and add to 'itemsByName' state\n\n\n    const setNamesJson = async () => {\n      var jsonRes = await getJsonByName();\n      setItemsByName(jsonRes);\n    };\n\n    setJson();\n    setNamesJson();\n\n    function loading() {\n      if (itemsByName.length > 0) {\n        console.log(itemsByName);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(nameSet).map((keyName, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          name: nameSet[keyName],\n          items: items,\n          manufacturer: itemsByName[nameSet[keyName]]['manufacturer']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Itemlist, \"7zXbTS4ZO/wf1ot/XsjXcDeHw6c=\");\n\n_c = Itemlist;\nexport default Itemlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Itemlist\");","map":{"version":3,"names":["React","useEffect","useState","Item","getJson","jsonData","fetch","then","response","json","data","JSON","parse","getJsonByName","nameSetFunc","jsonRes","nameSet","Set","key","Object","hasOwnProperty","call","element","add","nameArray","Itemlist","isLoaded","setIsLoaded","namesIsLoaded","setNamesIsLoaded","items","setItems","itemsByName","setItemsByName","setNameSet","setJson","setNamesJson","loading","length","console","log","keys","map","keyName","i"],"sources":["/Users/rvaldes/Documents/Pythonprojects/newcavldatabase/frontend/my-app/src/components/Itemlist.js"],"sourcesContent":["import React,{useEffect,useState} from 'react'\nimport Item from './Item'\n\nasync function getJson() {\n    var jsonData = await fetch('http://localhost:5000/api/items?by=ID')\n     .then(response => response.json())\n     .then(data => JSON.parse(data))\n     return jsonData\n   }\n\n  // get the list of JSON items from server by name\n   async function getJsonByName() {\n    var jsonData = await fetch('http://localhost:5000/api/items?by=name')\n     .then(response => response.json())\n     .then(data => JSON.parse(data))\n     return jsonData\n   }\n\n// function get the names of all items in the json object\nvar nameSetFunc = (jsonRes) => {\n    // create a new set\n    var nameSet = new Set()\n\n    // loop over json object that is passed in as an argument\n    for (const key in jsonRes) {\n        if (Object.hasOwnProperty.call(jsonRes, key)) {\n\n            // get each element from object and assign it to const\n            const element = jsonRes[key];\n\n            // add the element to a set\n            nameSet.add(element['name'])\n        }\n\n    // create an array and spread all the set elements into the array\n    var nameArray = [...nameSet]\n\n    }return nameArray\n}\n\n// react component function\nfunction Itemlist() {\n\n    const [isLoaded,setIsLoaded] = useState(false)\n    const [namesIsLoaded,setNamesIsLoaded] = useState(false)\n    const [items, setItems] = useState([])\n    const [itemsByName, setItemsByName] = useState([])\n    const [nameSet, setNameSet] = useState([])\n\n    // run on render\n    useEffect(() => {\n\n      // get items from getJson functon and add to 'items' state\n      const setJson = async () => {\n        var jsonRes = await getJson()\n        setItems(jsonRes)\n\n        // pass the JSON data into the 'create set' function\n        // and then add it to the Set state\n        setNameSet(nameSetFunc(jsonRes))\n      }\n\n       // get object of items by name from getJsonByName functon and add to 'itemsByName' state\n      const setNamesJson = async () => {\n        var jsonRes = await getJsonByName()\n        setItemsByName(jsonRes)\n      }\n  \n      setJson()\n      setNamesJson()\n\n      function loading() {\n        if (itemsByName.length > 0) {\n        console.log(itemsByName)\n        }\n      }\n      \n\n    }, [])\n\n\n\n  return (\n    <div>\n\n      {\n      <div>\n        {/* map over each name in the nameSet */}\n       {Object.keys(nameSet).map((keyName, i) => (\n            <div key={i}>\n                <Item name={nameSet[keyName]} items={items} manufacturer={itemsByName[nameSet[keyName]]['manufacturer']}/>\n            </div>\n        ))}\n      </div>\n      }\n\n      {\n        <div>loading...</div>\n      }\n  \n    </div>\n  )\n}\n\nexport default Itemlist\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}