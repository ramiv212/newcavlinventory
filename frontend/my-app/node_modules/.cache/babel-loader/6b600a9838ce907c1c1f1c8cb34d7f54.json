{"ast":null,"code":"var _jsxFileName = \"/Users/rvaldes/Documents/Pythonprojects/newcavldatabase/frontend/my-app/src/components/Itemlist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Item from './Item';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function getJson() {\n  var jsonData = await fetch('http://localhost:5000/api/items?by=ID').then(response => response.json()).then(data => JSON.parse(data));\n  return jsonData;\n} // function get the names of all items in the json object\n\n\nvar nameSetFunc = jsonRes => {\n  // create a new set\n  var nameSet = new Set(); // loop over json object that is passed in as an argument\n\n  for (const key in jsonRes) {\n    if (Object.hasOwnProperty.call(jsonRes, key)) {\n      // get each element from object and assign it to const\n      const element = jsonRes[key]; // add the element to a set\n\n      nameSet.add(element['name']);\n    } // create an array and spread all the set elements into the array\n\n\n    var nameArray = [...nameSet];\n  }\n\n  return nameArray;\n}; // react component function\n\n\nfunction Itemlist() {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [nameSet, setNameSet] = useState([]); // run on render\n\n  useEffect(() => {\n    const setJson = async () => {\n      var jsonRes = await getJson();\n      setItems(jsonRes); // pass the JSON data into the 'create set' function\n      // and then add it to the state\n\n      setNameSet(nameSetFunc(jsonRes));\n    };\n\n    setJson();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.keys(nameSet).map((keyName, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itemlist-item\",\n      children: /*#__PURE__*/_jsxDEV(Item, {\n        name: nameSet[keyName],\n        items: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Itemlist, \"/ZqpZ4sx+HDw2ApQh4ToJ3L0v2s=\");\n\n_c = Itemlist;\nexport default Itemlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Itemlist\");","map":{"version":3,"names":["React","useEffect","useState","Item","getJson","jsonData","fetch","then","response","json","data","JSON","parse","nameSetFunc","jsonRes","nameSet","Set","key","Object","hasOwnProperty","call","element","add","nameArray","Itemlist","items","setItems","setNameSet","setJson","keys","map","keyName","i"],"sources":["/Users/rvaldes/Documents/Pythonprojects/newcavldatabase/frontend/my-app/src/components/Itemlist.js"],"sourcesContent":["import React,{useEffect,useState} from 'react'\nimport Item from './Item'\n\nasync function getJson() {\n    var jsonData = await fetch('http://localhost:5000/api/items?by=ID')\n     .then(response => response.json())\n     .then(data => JSON.parse(data))\n     return jsonData\n   }\n\n// function get the names of all items in the json object\nvar nameSetFunc = (jsonRes) => {\n    // create a new set\n    var nameSet = new Set()\n\n    // loop over json object that is passed in as an argument\n    for (const key in jsonRes) {\n        if (Object.hasOwnProperty.call(jsonRes, key)) {\n\n            // get each element from object and assign it to const\n            const element = jsonRes[key];\n\n            // add the element to a set\n            nameSet.add(element['name'])\n        }\n\n    // create an array and spread all the set elements into the array\n    var nameArray = [...nameSet]\n\n    }return nameArray\n}\n\n// react component function\nfunction Itemlist() {\n\n    const [items, setItems] = useState([])\n    const [nameSet, setNameSet] = useState([])\n\n    // run on render\n    useEffect(() => {\n      const setJson = async () => {\n        var jsonRes = await getJson()\n        setItems(jsonRes)\n\n        // pass the JSON data into the 'create set' function\n        // and then add it to the state\n        setNameSet(nameSetFunc(jsonRes))\n      }\n  \n      setJson()\n      \n\n    }, [])\n\n\n\n  return (\n    <div>\n        {/* map over each name in the nameSet */}\n        {Object.keys(nameSet).map((keyName, i) => (\n            <div key={i} className='itemlist-item'>\n                <Item name={nameSet[keyName]} items={items} />\n            </div>\n        ))}\n    </div>\n  )\n}\n\nexport default Itemlist\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,eAAeC,OAAf,GAAyB;EACrB,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAD,CAAL,CACnBC,IADmB,CACdC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADE,EAEnBF,IAFmB,CAEdG,IAAI,IAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAFM,CAArB;EAGC,OAAOL,QAAP;AACD,C,CAEJ;;;AACA,IAAIQ,WAAW,GAAIC,OAAD,IAAa;EAC3B;EACA,IAAIC,OAAO,GAAG,IAAIC,GAAJ,EAAd,CAF2B,CAI3B;;EACA,KAAK,MAAMC,GAAX,IAAkBH,OAAlB,EAA2B;IACvB,IAAII,MAAM,CAACC,cAAP,CAAsBC,IAAtB,CAA2BN,OAA3B,EAAoCG,GAApC,CAAJ,EAA8C;MAE1C;MACA,MAAMI,OAAO,GAAGP,OAAO,CAACG,GAAD,CAAvB,CAH0C,CAK1C;;MACAF,OAAO,CAACO,GAAR,CAAYD,OAAO,CAAC,MAAD,CAAnB;IACH,CARsB,CAU3B;;;IACA,IAAIE,SAAS,GAAG,CAAC,GAAGR,OAAJ,CAAhB;EAEC;;EAAA,OAAOQ,SAAP;AACJ,CAnBD,C,CAqBA;;;AACA,SAASC,QAAT,GAAoB;EAAA;;EAEhB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACa,OAAD,EAAUY,UAAV,IAAwBzB,QAAQ,CAAC,EAAD,CAAtC,CAHgB,CAKhB;;EACAD,SAAS,CAAC,MAAM;IACd,MAAM2B,OAAO,GAAG,YAAY;MAC1B,IAAId,OAAO,GAAG,MAAMV,OAAO,EAA3B;MACAsB,QAAQ,CAACZ,OAAD,CAAR,CAF0B,CAI1B;MACA;;MACAa,UAAU,CAACd,WAAW,CAACC,OAAD,CAAZ,CAAV;IACD,CAPD;;IASAc,OAAO;EAGR,CAbQ,EAaN,EAbM,CAAT;EAiBF,oBACE;IAAA,UAEKV,MAAM,CAACW,IAAP,CAAYd,OAAZ,EAAqBe,GAArB,CAAyB,CAACC,OAAD,EAAUC,CAAV,kBACtB;MAAa,SAAS,EAAC,eAAvB;MAAA,uBACI,QAAC,IAAD;QAAM,IAAI,EAAEjB,OAAO,CAACgB,OAAD,CAAnB;QAA8B,KAAK,EAAEN;MAArC;QAAA;QAAA;QAAA;MAAA;IADJ,GAAUO,CAAV;MAAA;MAAA;MAAA;IAAA,QADH;EAFL;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;GAjCQR,Q;;KAAAA,Q;AAmCT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}