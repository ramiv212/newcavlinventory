{"ast":null,"code":"var _jsxFileName = \"/Users/rvaldes/Documents/Pythonprojects/newcavldatabase/frontend/my-app/src/contexts/jsonItemsContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst itemsByIdContext = /*#__PURE__*/createContext();\nconst itemsByNameContext = /*#__PURE__*/createContext();\nconst renderNamesContext = /*#__PURE__*/createContext(); // A \"provider\" is used to encapsulate only the\n// components that needs the state in this context\n\nfunction ItemProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // these states check when JSON is loaded\n  const [idIsLoaded, setIdIsLoaded] = useState(false);\n  const [nameIsLoaded, setNameIdIsLoaded] = useState(false);\n  const [renderNames, setRenderNames] = useState(false); // get JSON data by ID\n\n  async function getJson() {\n    var jsonData = await fetch('http://localhost:5000/api/items?by=ID').then(response => response.json()).then(data => JSON.parse(data));\n    setIdIsLoaded(true);\n    return jsonData;\n  } // get the list of JSON items from server by name\n\n\n  async function getJsonByName() {\n    var jsonData = await fetch('http://localhost:5000/api/items?by=name').then(response => response.json()).then(data => JSON.parse(data));\n    setNameIdIsLoaded(true);\n    return jsonData;\n  } //  delete item from server\n\n\n  function deleteItem(index, editState, onlyChild, refreshItem, setRefreshItem) {\n    const url = \"http://localhost:5000/api/item/\" + index;\n    const data = {};\n    const params = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data),\n      method: \"DELETE\"\n    };\n    let response = fetch(url, params).then(data => data.json()).then(res => res);\n    editState(false);\n    const thisItem = document.getElementsByClassName('id' + index);\n    console.log(index);\n    console.log(thisItem);\n    thisItem[0].style.display = \"\";\n    return response;\n  }\n\n  return /*#__PURE__*/_jsxDEV(renderNamesContext.Provider, {\n    value: {\n      renderNames,\n      setRenderNames\n    },\n    children: /*#__PURE__*/_jsxDEV(itemsByIdContext.Provider, {\n      value: {\n        getJson,\n        idIsLoaded,\n        setIdIsLoaded,\n        deleteItem\n      },\n      children: /*#__PURE__*/_jsxDEV(itemsByNameContext.Provider, {\n        value: {\n          getJsonByName,\n          nameIsLoaded,\n          setNameIdIsLoaded\n        },\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ItemProvider, \"SnvTRuIHh3CyBuZLbI+RnSillPM=\");\n\n_c = ItemProvider;\nexport { ItemProvider, itemsByIdContext, itemsByNameContext, renderNamesContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemProvider\");","map":{"version":3,"names":["React","createContext","useState","itemsByIdContext","itemsByNameContext","renderNamesContext","ItemProvider","children","idIsLoaded","setIdIsLoaded","nameIsLoaded","setNameIdIsLoaded","renderNames","setRenderNames","getJson","jsonData","fetch","then","response","json","data","JSON","parse","getJsonByName","deleteItem","index","editState","onlyChild","refreshItem","setRefreshItem","url","params","headers","body","stringify","method","res","thisItem","document","getElementsByClassName","console","log","style","display"],"sources":["/Users/rvaldes/Documents/Pythonprojects/newcavldatabase/frontend/my-app/src/contexts/jsonItemsContext.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\n\n\nconst itemsByIdContext = createContext();\nconst itemsByNameContext = createContext();\nconst renderNamesContext = createContext();\n\n// A \"provider\" is used to encapsulate only the\n// components that needs the state in this context\nfunction ItemProvider({ children }) {\n\n  // these states check when JSON is loaded\nconst [idIsLoaded, setIdIsLoaded] = useState(false)\nconst [nameIsLoaded, setNameIdIsLoaded] = useState(false)\nconst [renderNames, setRenderNames] = useState(false)\n\n// get JSON data by ID\nasync function getJson() {\n  var jsonData = await fetch('http://localhost:5000/api/items?by=ID')\n   .then(response => response.json())\n   .then(data => JSON.parse(data))\n\n   setIdIsLoaded(true)\n   return jsonData\n }\n\n// get the list of JSON items from server by name\n async function getJsonByName() {\n  var jsonData = await fetch('http://localhost:5000/api/items?by=name')\n   .then(response => response.json())\n   .then(data => JSON.parse(data))\n\n   setNameIdIsLoaded(true)\n   return jsonData\n }\n\n//  delete item from server\nfunction deleteItem(index,editState,onlyChild,refreshItem,setRefreshItem){\n  const url = \"http://localhost:5000/api/item/\" + index\n  const data = {}\n  const params = {\n    headers:{ \"Content-Type\": \"application/json\"},\n    body: JSON.stringify(data),\n    method: \"DELETE\"\n  }\n   let response = fetch(url,params)\n    .then(data => data.json())\n    .then(res => res)\n\n  editState(false)\n\n  const thisItem = document.getElementsByClassName('id' + index)\n  console.log(index)\n  console.log(thisItem)\n  thisItem[0].style.display = \"\"\n\n    return response\n} \n\n  return (\n    <renderNamesContext.Provider value={{renderNames,setRenderNames}}>\n      <itemsByIdContext.Provider value={{getJson,idIsLoaded,setIdIsLoaded,deleteItem}}>\n        <itemsByNameContext.Provider value={{getJsonByName,nameIsLoaded,setNameIdIsLoaded}}>\n          {children}\n        </itemsByNameContext.Provider>\n      </itemsByIdContext.Provider>\n      </renderNamesContext.Provider>\n  );\n}\n\nexport { ItemProvider, itemsByIdContext, itemsByNameContext ,renderNamesContext};"],"mappings":"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"},"metadata":{},"sourceType":"module"}