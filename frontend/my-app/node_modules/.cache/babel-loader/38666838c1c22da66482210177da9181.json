{"ast":null,"code":"var _jsxFileName = \"/Users/rvaldes/Documents/Pythonprojects/newcavldatabase/frontend/my-app/src/contexts/jsonItemsContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst jsonItemsContext = /*#__PURE__*/createContext();\nconst jsonSetItemsContext = /*#__PURE__*/createContext();\nconst idIsLoadedsContext = /*#__PURE__*/createContext();\nconst setIdIsLoadedContext = /*#__PURE__*/createContext(); // get JSON data by ID\n\nasync function getJson() {\n  var jsonData = await fetch('http://localhost:5000/api/items?by=ID').then(response => response.json()).then(data => JSON.parse(data));\n  console.log('ran1');\n  setIdIsLoaded(true);\n  return jsonData;\n} // get the list of JSON items from server by name\n\n\nasync function getJsonByName() {\n  var jsonData = await fetch('http://localhost:5000/api/items?by=name').then(response => response.json()).then(data => JSON.parse(data));\n  console.log('ran2');\n  setNameIdIsLoaded(true);\n  return jsonData;\n} // A \"provider\" is used to encapsulate only the\n// components that needs the state in this context\n\n\nfunction ItemProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [items, setItems] = useState([]); // these states check when JSON is loaded\n\n  const [idIsLoaded, setIdIsLoaded] = useState(false); // const [nameIsLoaded, setNameIdIsLoaded] = useState(false)\n  // const [itemsByName, setItemsByName] = useState([])\n  // const [nameSet, setNameSet] = useState([])\n\n  return /*#__PURE__*/_jsxDEV(jsonItemsContext.Provider, {\n    value: items,\n    children: /*#__PURE__*/_jsxDEV(jsonSetItemsContext.Provider, {\n      value: setItems,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ItemProvider, \"BZLzg5XKQqs1HS208QiBsfvkVeg=\");\n\n_c = ItemProvider;\nexport { ItemProvider, jsonItemsContext, jsonSetItemsContext, idIsLoadedsContext, setIdIsLoadedContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemProvider\");","map":{"version":3,"names":["React","createContext","useState","jsonItemsContext","jsonSetItemsContext","idIsLoadedsContext","setIdIsLoadedContext","getJson","jsonData","fetch","then","response","json","data","JSON","parse","console","log","setIdIsLoaded","getJsonByName","setNameIdIsLoaded","ItemProvider","children","items","setItems","idIsLoaded"],"sources":["/Users/rvaldes/Documents/Pythonprojects/newcavldatabase/frontend/my-app/src/contexts/jsonItemsContext.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\n\n\nconst jsonItemsContext = createContext();\nconst jsonSetItemsContext = createContext();\n\nconst idIsLoadedsContext = createContext();\nconst setIdIsLoadedContext = createContext();\n\n\n// get JSON data by ID\nasync function getJson() {\n  var jsonData = await fetch('http://localhost:5000/api/items?by=ID')\n   .then(response => response.json())\n   .then(data => JSON.parse(data))\n   console.log('ran1')\n   setIdIsLoaded(true)\n   return jsonData\n }\n\n// get the list of JSON items from server by name\n async function getJsonByName() {\n  var jsonData = await fetch('http://localhost:5000/api/items?by=name')\n   .then(response => response.json())\n   .then(data => JSON.parse(data))\n   console.log('ran2')\n   setNameIdIsLoaded(true)\n   return jsonData\n }\n\n\n\n// A \"provider\" is used to encapsulate only the\n// components that needs the state in this context\nfunction ItemProvider({ children }) {\n\n  const [items, setItems] = useState([])\n  // these states check when JSON is loaded\nconst [idIsLoaded, setIdIsLoaded] = useState(false)\n// const [nameIsLoaded, setNameIdIsLoaded] = useState(false)\n\n  // const [itemsByName, setItemsByName] = useState([])\n  // const [nameSet, setNameSet] = useState([])\n\n  return (\n    <jsonItemsContext.Provider value={items}>\n      <jsonSetItemsContext.Provider value={setItems}>\n        {children}\n      </jsonSetItemsContext.Provider>\n    </jsonItemsContext.Provider>\n  );\n}\n\nexport { ItemProvider, jsonItemsContext, jsonSetItemsContext,idIsLoadedsContext,setIdIsLoadedContext };"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;;AAGA,MAAMC,gBAAgB,gBAAGF,aAAa,EAAtC;AACA,MAAMG,mBAAmB,gBAAGH,aAAa,EAAzC;AAEA,MAAMI,kBAAkB,gBAAGJ,aAAa,EAAxC;AACA,MAAMK,oBAAoB,gBAAGL,aAAa,EAA1C,C,CAGA;;AACA,eAAeM,OAAf,GAAyB;EACvB,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAD,CAAL,CACnBC,IADmB,CACdC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADE,EAEnBF,IAFmB,CAEdG,IAAI,IAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAFM,CAArB;EAGCG,OAAO,CAACC,GAAR,CAAY,MAAZ;EACAC,aAAa,CAAC,IAAD,CAAb;EACA,OAAOV,QAAP;AACD,C,CAEF;;;AACC,eAAeW,aAAf,GAA+B;EAC9B,IAAIX,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAD,CAAL,CACnBC,IADmB,CACdC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADE,EAEnBF,IAFmB,CAEdG,IAAI,IAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAFM,CAArB;EAGCG,OAAO,CAACC,GAAR,CAAY,MAAZ;EACAG,iBAAiB,CAAC,IAAD,CAAjB;EACA,OAAOZ,QAAP;AACD,C,CAIF;AACA;;;AACA,SAASa,YAAT,OAAoC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAElC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAlC,CAFkC,CAGlC;;EACF,MAAM,CAACuB,UAAD,EAAaP,aAAb,IAA8BhB,QAAQ,CAAC,KAAD,CAA5C,CAJoC,CAKpC;EAEE;EACA;;EAEA,oBACE,QAAC,gBAAD,CAAkB,QAAlB;IAA2B,KAAK,EAAEqB,KAAlC;IAAA,uBACE,QAAC,mBAAD,CAAqB,QAArB;MAA8B,KAAK,EAAEC,QAArC;MAAA,UACGF;IADH;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;GAjBQD,Y;;KAAAA,Y;AAmBT,SAASA,YAAT,EAAuBlB,gBAAvB,EAAyCC,mBAAzC,EAA6DC,kBAA7D,EAAgFC,oBAAhF"},"metadata":{},"sourceType":"module"}